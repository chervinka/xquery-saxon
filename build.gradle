// todo
// proper release plugin
// nexus-staging-maven-plugin
// maven-gpg-plugin

defaultTasks 'clean', 'build'

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath "com.netflix.nebula:gradle-extra-configurations-plugin:3.0.2"
        classpath 'io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.9.0'
        classpath 'pl.allegro.tech.build:axion-release-plugin:1.7.1'
    }
}

apply plugin: "pl.allegro.tech.build.axion-release"
apply plugin: 'io.codearte.nexus-staging'

allprojects {
    group 'com.github.lizardev'
    project.version = scmVersion.version
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'signing'
    apply plugin: 'maven'
    apply plugin: 'nebula.provided-base'

    archivesBaseName = "$rootProject.name-$name"
    sourceCompatibility = "1.7"
    targetCompatibility = "1.7"

    repositories {
        mavenCentral()
    }

    ext {
        saxonVersion = '9.6.0-7'
        guavaVersion = '18.0'
        commonsLangVersion = '3.4'
    }

    test {
        testLogging {
            events 'passed', 'skipped', 'failed'
            exceptionFormat 'full'
            showCauses true
            afterSuite { desc, result ->
                if (!desc.parent) {
                    println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                }
            }
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = "javadoc"
        from javadoc.destinationDir
    }

    if (project.hasProperty('release')) {
        artifacts {
            archives sourcesJar
            archives javadocJar
        }
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << '-Xlint:all'
    }

    signing {
        required { gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2') {
                    authentication(userName: project.properties['nexusUsername'], password: project.properties['nexusPassword'])
                }
                snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
                    authentication(userName: project.properties['nexusUsername'], password: project.properties['nexusPassword'])
                }
            }
        }
    }

    def installer = install.repositories.mavenInstaller
    def deployer = uploadArchives.repositories.mavenDeployer

    [installer, deployer]*.pom*.whenConfigured { pom ->
        pom.dependencies.removeAll { d ->
            d.scope == "test"
        }
        pom.dependencies = pom.dependencies.sort { d ->
            "$d.scope:$d.groupId:$d.artifactId"
        }
        pom.project {
            name = project.description
            description = project.description
            url = 'https://github.com/lizardev/xquery-saxon'
            licenses {
                license {
                    name = 'Apache License, Version 2.0'
                    url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution = 'repo'
                }
            }
            developers {
                developer {
                    name = 'Adam Laczynski'
                    organizationUrl = 'https://github.com/lizardev'
                }
                developer {
                    name = 'Michal Jedynak'
                }
            }
            scm {
                url = 'https://github.com/lizardev/xquery-saxon'
            }
        }
    }
}
